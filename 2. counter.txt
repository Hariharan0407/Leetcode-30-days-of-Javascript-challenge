Given an integer n, return a counter function. This counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).

 

Example 1:

Input: 
n = 10 
["call","call","call"]
Output: [10,11,12]
Explanation: 
counter() = 10 // The first time counter() is called, it returns n.
counter() = 11 // Returns 1 more than the previous time.
counter() = 12 // Returns 1 more than the previous time.
Example 2:

Input: 
n = -2
["call","call","call","call","call"]
Output: [-2,-1,0,1,2]
Explanation: counter() initially returns -2. Then increases after each sebsequent call.
 

Constraints:

-1000 <= n <= 1000
0 <= calls.length <= 1000
calls[i] === "call"

My solution 1:
var createCounter = function(n) {
    let count = 0;
    return function() {
        if(count==0){
           count++
        }
        else{
            n = n+1;
            count++
        }
        return n
    };
};

/** 
 * const counter = createCounter(10)
 * counter() // 10
 * counter() // 11
 * counter() // 12
 */

 My solution 2:
 var createCounter = function(n) {
    return function() {
        return n++
    };
};

/** 
 * const counter = createCounter(10)
 * counter() // 10
 * counter() // 11
 * counter() // 12
 */

 Notes:
 the value of n persists between calls becasue of the closure formed by the inner function. Becasue o the closure even after the outer function
 has completed eecution , javascript remembers the value of n. It will persis as long as the inner function exists. To reset n you have
 to reassign the unction to a different variable or reassign the vlaue.
 let counter = createCounter(10);
 in this line we are calling createCounter unction with a parameter 10 and the returned value is assignm=ned to the counter variable.
 Here the returned value is a variale so we are just assigning the innerfunction to the variable counter. So everytime counter() is called the 
 inner function will get executed. Due to the closure formed by the inner function over the outer function the value of n persists and increments
 everytime counter is called.